Sometimes you just have to pull yourself together.

1. Initialise a git repo and push the code onto the git
Reference: https://www.freecodecamp.org/news/git-push-local-branch-to-remote-how-to-publish-a-new-branch-in-git/
git init
git branch -m master main
git add .
git commit -m "episode-01"
git remote add origin https://github.com/ankitadk/Namaste-React.git
git remote -v
git pull origin main
git pull origin main --allow-unrelated-histories
git push origin main
git status

2. Install npm
npm init

3. Install Parcel - it is a bundler
npm install -D parcel => install parcel as a dev dependency since not needed on production
npx parcel index.html
Error
deleted node_modules folder and reinstalled npm using below command
npm install
npx parcel index.html => creates a dev build and hosts our app onto the local server [link: http://localhost:1234]

npm=> install a package
npx=> execute a package

Using cdn links is not a good way to use react library in our project.
Bcoz network calls are very costly. 
We can easily use it if it is already present in our node_modules and we do not wish to make any network calls.
We need to change cdn links if we need to use the upgraded version of the library.

4. Intsall react in our project
npm install react
npm i react-dom

Parcel:
-created a dev build
-created a local server
-it does HMR => hot module replacement since it uses File Watching Algorith (written in c++)
-it does caching for faster builds
-it does image optimization - most expensive work for a browser is loading images
-in case of production build it does the file minification
-bundling
-file compression so that the size is reduced
-consistent hashing
-code splitting
-differential bundling - to support older browsers
-Error handling
-HTTPs
-Tree Shaking - removes unused code

5. creating a production ready app using parcel
npx parcel build index.html

6. add browser compatibility in package.json file
  "browserslist": [
    "last 2 versions"
  ]
  
7. add scripts to package.json to create a dev and prod build
"start": "parcel index.html",
"build": "parcel build index.html",

npm run start => create dev build [npx parcel index.html]
npm start => short cut to create dev build [npx parcel index.html]
npm run build => create production build [npx parcel build index.html]


React syntax is very clumsy hence React developers created JSX 
JSX is not a part of React.
JSX and React are different.
JSX has HTML like syntax and it is not HTML inside JS.
In JSX, attributes are written using CamelCase.
If JSX code occupies multiple lines then wrap the code in circular brackets.

VS Code Extentions:
Better Comments
ESLint
Bracket Pair Coloriser
Prettier

Babel transpiles JSX to React.createElement. React element is converted to an object and then this object is rendered onto the browser as an HTML element.

React Component:
A function that returns some piece of JSX or a React element is a functional component.

Component Composition:
Putting a component inside a component is known as a Component Composition.

JSX takes care of injection attacks and cross site scripting since it is sanitizing the data.

episode 5: lets get hooked
-create a proper folder structure.
-create src folder in the root and move App.js inside it.
-components folder will have all the components.

Two types of exports and imports
-Default Export/import
-Named export/import

Note: Keep ur component code upto 100-200 lines.

-React Hooks
Normal JS utility functions
-useState()
-useEffect()

Note: Whenever a state variable changes React will find the difference between actual DOM and the virtual DOM and it re-renders the component.
Note: React is fast because it is good at DOM manipulation.

React Algorithm:
React uses Reconciliation algorithm also known as React Fiber.
Virtual DOM is a representation of actual DOM. It is a normal JavaScript object.
If I filter my UI to show 3 cards from 7 cards.
Algorithm compares the new object with the old one and then finds the div and updates the DOM.
React Fiber Architecture
Incremental Rendering => the ability to split rendering work into chunks and spread it out over multiple frames.

Episode-06 => Exploring the World
Monolith and Microservice architecture
Single Responsibility Principle
Separation of Concern
In case of Microservice architecture, we can build different services using different tech stacks.

Conditional Rendering
-Rendering UI on basis of some conditions.

Note: Whenever a state variable changes, React triggers a reconciliation cycle and re-renders a component.

Episode-07 => Finding the Path
Install JavaScript library i.e. React Router DOM
Command: npm i react-router-dom

1. create a configuration using createBrowserRouter.
2. Provide the routing configuration to the app using RouterProvider component.
3. Create error component and log errors using useRouteError hook.
3. Create routes
4. Create children routes

createBrowserRouter component creates a routing configuration for us.
RouterProvider component is used to provide the routing configuration to our app.
useRouteError hook can be used to give more info about the error.
Outlet component is used to load a child component. Outlet is filled with a child component according to the path.

Two types of routing in web apps:
1. Client side routing: Components are already loaded. We are not fetching a new page every time we click on any link.
Such apps also known as SPA coz app consists of a single page, just the components getting interchanged via client side routing.
2. Server side : We need to make a server call to load a component.

use useParams hook to extract and use the params from the url.

Episode-08 => Let's Get Classy

React Life cycle is applicable only to Class based components and not the functional components.
React is a Single Page Application and onclick of any link we are just changing the component.
There are a lot of things we need to clear while leaving a page like resources used by setInterval() because in case of SPAs app is not reloaded which is why we need to use unmount to cleanup the memory.
We can use return function in useEffect to clear the memory (while unmounting).
return () => {
 console.log("useEffect return");
}

Research about:
constructor(props)
super(props)
why do we write async componentDidMount?
why cant we write asynch in useEffect callback function : useEffect(async ()=>{}, [])?

Episode-09 => Optimizing our App
Custom Hooks
Single Responsiblity Principle: Every component should have a single responsibility.
Advantages of SRP:
1. Easy to test, debug and maintain the app.
2. Reusable code.

Write a custom hook to fetch the data of Restaurant Menu and use it in RestaurantMenu component.
Create a separate file for every new hook.
Create a hook in utils folder.
Always start a hook name with the word use.

Build a custom hook to find if user (Internet) is online or offline. Show a green dot if online and a red dot if offline.
Also, display a msg on the screen informing that the User is Offline.

App optimization:
The main job of a bundler (Parcel) is to bundle our app.
Bundling is the process of taking all the files and converting into a single file.
Break ur app into small files coz otherwise one single file will take alot of time for loading the app resuting in poor UX.
This process is known as Chunking OR Code Splitting OR Dynamic Import OR Lazy Loading OR Dynamic Bundling OR On-Demand Loading.
Use lazy() package provided by react for lazy loading.

Episode-10 => Jo Dikhta Hai, Vo Bikta Hai

Ways of writing css:
1. create an index.css file.
2. using SASS and SCSS [writing CSS with superpowers] => not a recommended way for big apps/projects
3. use styled components
4. Material UI
5. Chakra UI
6. Bootstrap
7. Ant design
8. Tailwind CSS

Parcel uses postcssrc to read and understand Tailwind CSS.
Tailwind CSS VS Code extension: Tailwind CSS IntelliSense.

Episode-11 => Data is the New Oil

Higher Order Components
Function which accept components as arguments  and returns a component is known as Higher Order Component. It enhances the component which is passed as an argument.

Take RestaurantCard as an input component and return RestaurantCard with Promoted label as the output component.

What are pure functions?
Higher order functions are pure functions.
Controlled and Uncontrolled components.
Lifting the state up.
Build an accordion for Restaurant Menu Page to display different types of Restaurant Menus.

React Dev Tools:
-Components => It represents the virtual dom of the page, [LHS=> UI Layer, RSH => Data Layer].
-Profiler => We can record our actions/activities and check which component needs performance optimization.

Lifting the state up => Passing the state to the parent component. Useful React feature to build the accordion.
Controlled component [A component which is controlled by its parent component] => RestaurantCategory component is controlled by its parent component i.e. RestaurantMenu component.
Uncontrolled component: Any component which has its own state is an Uncontrolled component.

props drilling
useContext: Powerful way to manage data. Data is placed at a global place and anyone can access it.
We cannot use hooks in class based components.

Redux is a state management library. It is an external library. It is not a part of react.
Context can be used for medium sized application. Context is provided by react.
Redux is used for large apps. It is scalable.

Episode-12 => Let's Build Our Store

React and Redux are different libraries.
Other Data mgmt libraries similar to Redux: zustand
Redux offers easy debugging. Redux is a JS library for predictable and maintainable global state management.
Redux has two libraries:
a. React-Redux (Official React bindings for Redux): it is a bridge between React and Redux.
b. Redux Toolkit: Standard and newer way of writing Redux now. The Redux Toolkit package is intended to be the standard way to write Redux logic.

In our Food App we will be using Redux Toolkit along with React-Redux. We will not be using traditional/vanilla Redux.
What is the difference between traditional/vanilla Redux and Redux toolkit?

We will be building a cart page and cart flow feature and in order to store all the cart data/information we will use Redux store.

Redux is a big JS Object kept at a global central place.
In order not to make it clumsy, we divide this data into smaller slices. Also to keep similar data separate we make logical separation which is known as slices. ex: themedataslice, cartdataslice, userdataslice.
When we click on an ADD button, it dispatches an Action(A) which calls a Reducer function which updates the data slice of our Redux store.
Selector is used to read the data from Redux store and it modifies the React component accordingly. This phenomenon is known as subscribing to the store. Header component has subscibed to the Redux store using a selector.

Redux Toolkit:
1. Install Redux libraries => redux toolkit and react-redux.
npm i @reduxjs/toolkit
Build a Redux store.
Connect our store to our app.
Create a cart slice.
Dispatch an action.
Read the data using selector

configureStore() gives the store of our React app and hence comes from @reduxjs/toolkit library.
Next, provide the store to our application. {Provider} comes from a react-redux library since this acts as a bridge between react and redux.
In order to provide the store to our application we will wrap our whole app with the Provider.
Create a cart slice.
Add a slice to a store.
Subscribe to the store using a Selector.

Pointer to note while using a Redux Store:
1. While using selector make sure you are using the right portion of the store. So my selected data will update only when the selected portion of the data changes and not any other part of the redux store.
2. While creating a main redux store we use the keyword as 'reducer' since it is a single reducer, where as while creating slice we use multiple reducers and hence the keyword 'reducers'.
While exporting from a slice we export only one reducer from it and hence the keyword 'reducer' and in turn it is a combination of multiple small reducers.

Immer library is used by Redux Toolkit behind the scenes to handle immutable states.

Redux Dev Tools

Visit Redux Toolkit website and read about RTK Query.

Episode-13 => Time for Test

Types of Developer Testing:
-Unit Testing: Test your React components in isolation.
-Integration Testing: Testing the integration of Components. Developing a flow of testing in our App.
-End to End Testing (EtoE): Testing the App stating from user landing onto the page to user leaving the website. Needs different types of tetsing like Cypress, Selenium, etc.

Testing is a part of development.
We will be working on Unit testing and Integration testing which developers are mainly responsible for.

Libraries needed for setting up the Testing env.:
-React Testing Library: React Testing Library builds on top of DOM Testing Library by adding APIs for working with React components.
React Testing Library uses Jest.
-Jest - JavaScript Testing: Jest is a delightful JavaScript Testing Framework with a focus on simplicity.
It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!

1. Install React Testing Library
npm install --save-dev @testing-library/react
2. Install Jest
npm install -D jest
3. Install dependencies required to use Babel coz we are using Jest along with babel
npm install --save-dev babel-jest @babel/core @babel/preset-env
4. Configure Babel to target your current version of Node by creating a babel.config.js file in the root of your project
5. We need to reconfigure parcel to disable the default Babel transpilation in Parcel. Coz parcel already uses babel and jest also uses babel. In order to make Parcel use these latest Babel configs we need to do some more changes.
6. jest configuration
npx jest --init [execute the package and do not install it]
Would you like to use Typescript for the configuration file? ... no
Choose the test environment that will be used for testing: jsdom (browser-like)
Do you want Jest to add coverage reports? ... yes
Which provider should be used to instrument code for coverage? » babel
Automatically clear mock calls, instances, contexts and results before every test? ... yes

Test cases do not run directly on the browser. So testing needs an environment for testing our app. 
jsdom is like a browser which gives us the features of a browser and all the test cases run here.

7. Install jsdom library [If you're using Jest 28 or later, jest-environment-jsdom package now must be installed separately.]
npm install --save-dev jest-environment-jsdom

-- = dunder

8. Install @babel/preset-react library to make JSX work in test cases
npm i -D @babel/preset-react
9. SyntaxError: D:\Ankita\IT Stuff\Languages\NamasteReact\src\components\__tests__\contact.test.js: Support for the experimental syntax 'jsx' isn't currently enabled
Include @babel/preset-react inside my babel config
["@babel/preset-react", { runtime: "automatic" }]
Babel is a transpiler. It converts our code from one form to another. Right now, @babel/preset-react is helping our testing library to convert JSX  code into HTML so that it can read properly.
10.
TypeError: expect(...).toBeInTheDocument is not a function
Install @testing-library/jest-dom
npm i --save-dev @testing-library/jest-dom

<Link> tag comes from react-router-dom library.
We need to provide Redux store and BrowserRouter to render a component while writing the test cases.

// Querying: finding by role is better way than finding by text
const loginButton = screen.getByRole("button");
const loginButton = screen.getByText("Login");

ReferenceError: fetch is not defined
jest does not understand fetch. fetch is given to us by the browser and not by JavaScript and the component we are testing is rendered onto the JSDOM and not on the Browser. Hence fetch is not working on its own in JSDOM while testing. Hence we need to fake it. we need to write mock fetch function for it.

Warning: An update to Body inside a test was not wrapped in act(...).
When testing, code that causes React state updates should be wrapped into act(...):
act(() => {
/* fire events that update state */
});
/* assert on the output */
This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act
===>Whenever we do state update inside React while testing, wrap ur Component inside act function and it will work properly.

Note: act() function comes from "react" library. It returns a promise.

afterAll
beforeAll
beforeEach
afterEach

Every test case should check for only one single thing.

In a test case while rendering a component:
-If it has a Link then wrap the component with <BrowserRouter>.
-If Redux store is used then provide the store to that component by wrapping it with the <Provider>.
-If data is passed then use the mockdata.
-If an API call is being made then write a fake fetch function as shown below:
global.fetch = jest.fn(() => {
  return Promise.resolve({
    json: () => Promise.resolve(MOCK_DATA_NAME),
  });
});
We cannot make network calls from jsdom which is not an actual browser. It is a browser like environment.
Replace global.fetch with a mock/dummy function using jest.fn which gives a mock function.
Also, these test cases will run even without an Internet connection.
[global.fetch is equal to jest.fn. jest.fn gives us a mock function. Mock function takes a dummy callback function and that function should be exactly similar to the fetch function and fetch returns a promise which needs to be resolved. It resolves with a json. And so promise.resolve returns a json and json is again a function that returns a promise i.e. Promise.resolve and this Promise.resolve actually has a data which is our MOCK_DATA. MOCK_DATA is the data that we get from an api call.]

Note: If you want to check which test cases are not covered yet then visit folder coverage -> Icov-report -> index.html -> Open with live server.
It will show us the exact places/files which are tested and not tested.